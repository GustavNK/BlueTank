
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcb  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e7  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000550  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000263  00000000  00000000  00002331  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
#include <avr/io.h>
#include <stdlib.h>

void initADC()
{
	DDRC = 0x00;
  80:	17 b8       	out	0x07, r1	; 7
	ADMUX = 0b01000000;			//REF 01   ADLAR 0    MUX 00000
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN);		//ADEN 1
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	ADCSRA &= ~(1<<ADIF);		//ADIF 0
  92:	80 81       	ld	r24, Z
  94:	8f 7e       	andi	r24, 0xEF	; 239
  96:	80 83       	st	Z, r24
	ADCSRA |= 0b00000111;		//ADP 111
  98:	80 81       	ld	r24, Z
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <startADC0>:
}

void startADC0()
{
	ADMUX = 0b01000000;			//MUX 00000 = ADC0 (A0/PC0)
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);		//ADC on
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){}	//Wait for finish
  b0:	80 81       	ld	r24, Z
  b2:	86 fd       	sbrc	r24, 6
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <startADC0+0x10>
}
  b6:	08 95       	ret

000000b8 <startADC1>:

void startADC1()
{
	ADMUX = 0b01000001;			//MUX 00001 = ADC1 (A1/PC1)
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);		//ADC on
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){}	//Wait for finish
  c8:	80 81       	ld	r24, Z
  ca:	86 fd       	sbrc	r24, 6
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <startADC1+0x10>
}
  ce:	08 95       	ret

000000d0 <getADC>:

int getADC()
{
	return ADC;
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d8:	08 95       	ret

000000da <main>:
//send for motor1	"1xxxxxxx"
//send for motor0	"0xxxxxxx"

int main(void)
{	
    InitUART(9600, 8);
  da:	48 e0       	ldi	r20, 0x08	; 8
  dc:	60 e8       	ldi	r22, 0x80	; 128
  de:	75 e2       	ldi	r23, 0x25	; 37
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 b5 00 	call	0x16a	; 0x16a <InitUART>
	initADC();
  e8:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
	
	while (1) 
    {
		//A0 VRx controller		Wheel
		startADC0();
  ec:	0e 94 50 00 	call	0xa0	; 0xa0 <startADC0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	80 e7       	ldi	r24, 0x70	; 112
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x1c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x26>
 100:	00 00       	nop
		_delay_ms(50);								//VRx  left/right
		SendChar((getADC() >> 3) | 0b10000000);		//Right shift for 7-bit char with MSB as parity
 102:	0e 94 68 00 	call	0xd0	; 0xd0 <getADC>
 106:	95 95       	asr	r25
 108:	87 95       	ror	r24
 10a:	95 95       	asr	r25
 10c:	87 95       	ror	r24
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	80 68       	ori	r24, 0x80	; 128
 114:	0e 94 03 01 	call	0x206	; 0x206 <SendChar>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	81 ee       	ldi	r24, 0xE1	; 225
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x44>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x4e>
 128:	00 00       	nop
		_delay_ms(100);
		//A1 VRy controller		Motor
		startADC1();
 12a:	0e 94 5c 00 	call	0xb8	; 0xb8 <startADC1>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x5a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x64>
 13e:	00 00       	nop
		_delay_ms(50);							//VRy  up/down
		SendChar((getADC() >> 3) & 0b01111111);		//Right shift for 7-bit char with MSB as parity
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <getADC>
 144:	95 95       	asr	r25
 146:	87 95       	ror	r24
 148:	95 95       	asr	r25
 14a:	87 95       	ror	r24
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	0e 94 03 01 	call	0x206	; 0x206 <SendChar>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	81 ee       	ldi	r24, 0xE1	; 225
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x82>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x8c>
 166:	00 00       	nop
 168:	c1 cf       	rjmp	.-126    	; 0xec <main+0x12>

0000016a <InitUART>:
*************************************************************************/
char ReadChar()
{
	while(!CharReady()){}
	return UDR0;
}
 16a:	cf 93       	push	r28
 16c:	c4 2f       	mov	r28, r20
 16e:	28 e1       	ldi	r18, 0x18	; 24
 170:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	9c 01       	movw	r18, r24
 18a:	ad 01       	movw	r20, r26
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	44 1f       	adc	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	44 1f       	adc	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	74 e2       	ldi	r23, 0x24	; 36
 1a0:	84 ef       	ldi	r24, 0xF4	; 244
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 0b 01 	call	0x216	; 0x216 <__udivmodsi4>
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	31 09       	sbc	r19, r1
 1ac:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1b0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1b4:	c6 30       	cpi	r28, 0x06	; 6
 1b6:	71 f0       	breq	.+28     	; 0x1d4 <InitUART+0x6a>
 1b8:	18 f4       	brcc	.+6      	; 0x1c0 <InitUART+0x56>
 1ba:	c5 30       	cpi	r28, 0x05	; 5
 1bc:	31 f0       	breq	.+12     	; 0x1ca <InitUART+0x60>
 1be:	1c c0       	rjmp	.+56     	; 0x1f8 <InitUART+0x8e>
 1c0:	c7 30       	cpi	r28, 0x07	; 7
 1c2:	71 f0       	breq	.+28     	; 0x1e0 <InitUART+0x76>
 1c4:	c8 30       	cpi	r28, 0x08	; 8
 1c6:	91 f0       	breq	.+36     	; 0x1ec <InitUART+0x82>
 1c8:	17 c0       	rjmp	.+46     	; 0x1f8 <InitUART+0x8e>
 1ca:	e2 ec       	ldi	r30, 0xC2	; 194
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 83       	st	Z, r24
 1d2:	17 c0       	rjmp	.+46     	; 0x202 <InitUART+0x98>
 1d4:	e2 ec       	ldi	r30, 0xC2	; 194
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
 1de:	11 c0       	rjmp	.+34     	; 0x202 <InitUART+0x98>
 1e0:	e2 ec       	ldi	r30, 0xC2	; 194
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	80 83       	st	Z, r24
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <InitUART+0x98>
 1ec:	e2 ec       	ldi	r30, 0xC2	; 194
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	86 60       	ori	r24, 0x06	; 6
 1f4:	80 83       	st	Z, r24
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <InitUART+0x98>
 1f8:	e2 ec       	ldi	r30, 0xC2	; 194
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	86 60       	ori	r24, 0x06	; 6
 200:	80 83       	st	Z, r24
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <SendChar>:
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
	while( !( UCSR0A & (1<<UDRE0) ) ){}
 206:	e0 ec       	ldi	r30, 0xC0	; 192
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	90 81       	ld	r25, Z
 20c:	95 ff       	sbrs	r25, 5
 20e:	fd cf       	rjmp	.-6      	; 0x20a <SendChar+0x4>
	UDR0 = Tegn;
 210:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 214:	08 95       	ret

00000216 <__udivmodsi4>:
 216:	a1 e2       	ldi	r26, 0x21	; 33
 218:	1a 2e       	mov	r1, r26
 21a:	aa 1b       	sub	r26, r26
 21c:	bb 1b       	sub	r27, r27
 21e:	fd 01       	movw	r30, r26
 220:	0d c0       	rjmp	.+26     	; 0x23c <__udivmodsi4_ep>

00000222 <__udivmodsi4_loop>:
 222:	aa 1f       	adc	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	ee 1f       	adc	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	a2 17       	cp	r26, r18
 22c:	b3 07       	cpc	r27, r19
 22e:	e4 07       	cpc	r30, r20
 230:	f5 07       	cpc	r31, r21
 232:	20 f0       	brcs	.+8      	; 0x23c <__udivmodsi4_ep>
 234:	a2 1b       	sub	r26, r18
 236:	b3 0b       	sbc	r27, r19
 238:	e4 0b       	sbc	r30, r20
 23a:	f5 0b       	sbc	r31, r21

0000023c <__udivmodsi4_ep>:
 23c:	66 1f       	adc	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	88 1f       	adc	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	1a 94       	dec	r1
 246:	69 f7       	brne	.-38     	; 0x222 <__udivmodsi4_loop>
 248:	60 95       	com	r22
 24a:	70 95       	com	r23
 24c:	80 95       	com	r24
 24e:	90 95       	com	r25
 250:	9b 01       	movw	r18, r22
 252:	ac 01       	movw	r20, r24
 254:	bd 01       	movw	r22, r26
 256:	cf 01       	movw	r24, r30
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
