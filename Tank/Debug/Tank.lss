
Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0f  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ca  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000527  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002af  00000000  00000000  0000219d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define F_CPU 16000000 //CPU speed 

int main(void)
{
	initUART(9600, 8);
  80:	48 e0       	ldi	r20, 0x08	; 8
  82:	60 e8       	ldi	r22, 0x80	; 128
  84:	75 e2       	ldi	r23, 0x25	; 37
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 9a 00 	call	0x134	; 0x134 <initUART>
	DDRD &= ~(1<<0);  //set RX as input
  8e:	50 98       	cbi	0x0a, 0	; 10
	initMotor();
  90:	0e 94 56 00 	call	0xac	; 0xac <initMotor>
	
	while (1)
	{
		unsigned char RxByte= ReadChar();
  94:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <ReadChar>
		if(RxByte & 0b10000000){
  98:	88 23       	and	r24, r24
  9a:	24 f4       	brge	.+8      	; 0xa4 <main+0x24>
			setMotor1(RxByte << 1);
  9c:	88 0f       	add	r24, r24
  9e:	0e 94 6e 00 	call	0xdc	; 0xdc <setMotor1>
  a2:	f8 cf       	rjmp	.-16     	; 0x94 <main+0x14>
			} else {
			setMotor2(RxByte << 1);
  a4:	88 0f       	add	r24, r24
  a6:	0e 94 84 00 	call	0x108	; 0x108 <setMotor2>
  aa:	f4 cf       	rjmp	.-24     	; 0x94 <main+0x14>

000000ac <initMotor>:
 */ 
#include <avr/io.h>

void initMotor()
{
	DDRB |= (1<<PORTB3);	//PB3 output (D11)
  ac:	23 9a       	sbi	0x04, 3	; 4
	PORTB &= ~(1<<PORTB3);	//PB3 off
  ae:	2b 98       	cbi	0x05, 3	; 5
	DDRD |= (1<<PORTD3);	//PD3 output (D3)
  b0:	53 9a       	sbi	0x0a, 3	; 10
	PORTD &= ~(1<<PORTD3);	//PD3 off
  b2:	5b 98       	cbi	0x0b, 3	; 11
	
	TCCR2A = 0b10100001;	//COM2A 10  WGM 001  CS2 110
  b4:	81 ea       	ldi	r24, 0xA1	; 161
  b6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 0b00000110;
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 0;				//OC2A PWM 0% duty cycle
  c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;				//OC2B PWM 0% duty cycle
  c4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	DDRD |= (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7); //PD4-7 as output (D4-7)
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD4) | (1<<PORTD6);  //Turn on D4 & D6
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	80 65       	ori	r24, 0x50	; 80
  d2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD5) & ~(1<<PORTD7); //Turn off D5 & D7 
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8f 75       	andi	r24, 0x5F	; 95
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	08 95       	ret

000000dc <setMotor1>:
}

void setMotor1(char speed)
{
	if (speed > (255 / 2))
  dc:	88 23       	and	r24, r24
  de:	54 f4       	brge	.+20     	; 0xf4 <setMotor1+0x18>
	{
		PORTD |= (1<<PORTD4);
  e0:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD &= ~(1<<PORTD5);
  e2:	5d 98       	cbi	0x0b, 5	; 11
		char speed_ = (speed - (255/2)) * 2;
  e4:	88 0f       	add	r24, r24
  e6:	8e 5f       	subi	r24, 0xFE	; 254
		OCR2B = speed_ > 30 ? speed_ : 0;			
  e8:	8f 31       	cpi	r24, 0x1F	; 31
  ea:	08 f4       	brcc	.+2      	; 0xee <setMotor1+0x12>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
  f2:	08 95       	ret
	} else
	{
		PORTD &= ~(1<<PORTD4);
  f4:	5c 98       	cbi	0x0b, 4	; 11
		PORTD |= (1<<PORTD5);
  f6:	5d 9a       	sbi	0x0b, 5	; 11
		char speed_ = (~speed - (255/2)) * 2;
  f8:	88 0f       	add	r24, r24
  fa:	81 95       	neg	r24
		OCR2B = speed_ > 30 ? speed_ : 0;
  fc:	8f 31       	cpi	r24, 0x1F	; 31
  fe:	08 f4       	brcc	.+2      	; 0x102 <setMotor1+0x26>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 106:	08 95       	ret

00000108 <setMotor2>:
	}
}

void setMotor2(char speed)
{
	if (speed > (255 / 2))
 108:	88 23       	and	r24, r24
 10a:	54 f4       	brge	.+20     	; 0x120 <setMotor2+0x18>
	{
		PORTD |= (1<<PORTD6);
 10c:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD &= ~(1<<PORTD7);
 10e:	5f 98       	cbi	0x0b, 7	; 11
		char speed_ = (speed - (255/2)) * 2;
 110:	88 0f       	add	r24, r24
 112:	8e 5f       	subi	r24, 0xFE	; 254
		OCR2A = speed_ > 30 ? speed_ : 0;
 114:	8f 31       	cpi	r24, 0x1F	; 31
 116:	08 f4       	brcc	.+2      	; 0x11a <setMotor2+0x12>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 11e:	08 95       	ret
	} else
	{
		PORTD &= ~(1<<PORTD6);
 120:	5e 98       	cbi	0x0b, 6	; 11
		PORTD |= (1<<PORTD7);
 122:	5f 9a       	sbi	0x0b, 7	; 11
		char speed_ = (~speed - (255/2)) * 2;
 124:	88 0f       	add	r24, r24
 126:	81 95       	neg	r24
		OCR2A = speed_ > 30 ? speed_ : 0;
 128:	8f 31       	cpi	r24, 0x1F	; 31
 12a:	08 f4       	brcc	.+2      	; 0x12e <setMotor2+0x26>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 132:	08 95       	ret

00000134 <initUART>:
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
	return (UCSR0A & (1<<RXC0));
}
 134:	cf 93       	push	r28
 136:	c4 2f       	mov	r28, r20
 138:	28 e1       	ldi	r18, 0x18	; 24
 13a:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 13e:	dc 01       	movw	r26, r24
 140:	cb 01       	movw	r24, r22
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	9c 01       	movw	r18, r24
 154:	ad 01       	movw	r20, r26
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	44 1f       	adc	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	44 1f       	adc	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	74 e2       	ldi	r23, 0x24	; 36
 16a:	84 ef       	ldi	r24, 0xF4	; 244
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__udivmodsi4>
 172:	21 50       	subi	r18, 0x01	; 1
 174:	31 09       	sbc	r19, r1
 176:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 17a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 17e:	c6 30       	cpi	r28, 0x06	; 6
 180:	71 f0       	breq	.+28     	; 0x19e <initUART+0x6a>
 182:	18 f4       	brcc	.+6      	; 0x18a <initUART+0x56>
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	31 f0       	breq	.+12     	; 0x194 <initUART+0x60>
 188:	1c c0       	rjmp	.+56     	; 0x1c2 <initUART+0x8e>
 18a:	c7 30       	cpi	r28, 0x07	; 7
 18c:	71 f0       	breq	.+28     	; 0x1aa <initUART+0x76>
 18e:	c8 30       	cpi	r28, 0x08	; 8
 190:	91 f0       	breq	.+36     	; 0x1b6 <initUART+0x82>
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <initUART+0x8e>
 194:	e2 ec       	ldi	r30, 0xC2	; 194
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 83       	st	Z, r24
 19c:	17 c0       	rjmp	.+46     	; 0x1cc <initUART+0x98>
 19e:	e2 ec       	ldi	r30, 0xC2	; 194
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <initUART+0x98>
 1aa:	e2 ec       	ldi	r30, 0xC2	; 194
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	80 83       	st	Z, r24
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <initUART+0x98>
 1b6:	e2 ec       	ldi	r30, 0xC2	; 194
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <initUART+0x98>
 1c2:	e2 ec       	ldi	r30, 0xC2	; 194
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	80 83       	st	Z, r24
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <ReadChar>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
	return (UCSR0A & (1<<RXC0));
 1d0:	e0 ec       	ldi	r30, 0xC0	; 192
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
Awaits new character received.
Then this character is returned.
*************************************************************************/
char ReadChar()
{
	while(!CharReady()){}
 1d6:	88 23       	and	r24, r24
 1d8:	ec f7       	brge	.-6      	; 0x1d4 <ReadChar+0x4>
	return UDR0;
 1da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1de:	08 95       	ret

000001e0 <__udivmodsi4>:
 1e0:	a1 e2       	ldi	r26, 0x21	; 33
 1e2:	1a 2e       	mov	r1, r26
 1e4:	aa 1b       	sub	r26, r26
 1e6:	bb 1b       	sub	r27, r27
 1e8:	fd 01       	movw	r30, r26
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <__udivmodsi4_ep>

000001ec <__udivmodsi4_loop>:
 1ec:	aa 1f       	adc	r26, r26
 1ee:	bb 1f       	adc	r27, r27
 1f0:	ee 1f       	adc	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	a2 17       	cp	r26, r18
 1f6:	b3 07       	cpc	r27, r19
 1f8:	e4 07       	cpc	r30, r20
 1fa:	f5 07       	cpc	r31, r21
 1fc:	20 f0       	brcs	.+8      	; 0x206 <__udivmodsi4_ep>
 1fe:	a2 1b       	sub	r26, r18
 200:	b3 0b       	sbc	r27, r19
 202:	e4 0b       	sbc	r30, r20
 204:	f5 0b       	sbc	r31, r21

00000206 <__udivmodsi4_ep>:
 206:	66 1f       	adc	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	88 1f       	adc	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	1a 94       	dec	r1
 210:	69 f7       	brne	.-38     	; 0x1ec <__udivmodsi4_loop>
 212:	60 95       	com	r22
 214:	70 95       	com	r23
 216:	80 95       	com	r24
 218:	90 95       	com	r25
 21a:	9b 01       	movw	r18, r22
 21c:	ac 01       	movw	r20, r24
 21e:	bd 01       	movw	r22, r26
 220:	cf 01       	movw	r24, r30
 222:	08 95       	ret

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
